최종적으로 사용할 알고리즘은
https://cocoon1787.tistory.com/317

성공한 해석은
https://data-make.tistory.com/402에서 찾아볼 수 있었

실패했지만, 비슷한 알고리즘은 
https://hydroponicglass.tistory.com/4
에서 찾을 수 있었다.

10개의 배열을 쪼갤 때
1,9/2,8/3,7/4,6/5,5/6,4/7,3/8,2/9,1

재귀로 가능한가?
인접 특성으로 인해
i = 1로 두고 N-1개까지를 쪼갤 수 있다

i가 2이면 return DP(1~2) + DP(3~10)

성공적 재귀가 가능하려면, 비용값이 전역으로 있어야한다
재귀의 깊이에 상관없이 모두 접근가능해야한다.

각 DP에서는 모든 경우로 쪼갰을 때의 최솟값을 구해야한다

무엇을 메모할 것인가?
N에서 M까지 비용의 최솟값을 저장하여, 상위단계에서 쓸 수 있도록해야한다

prefixSum배열을 만들어 구간합을 저장해둔다
prefixSum[i][j]는 cost의 i번부터 j번까지의 비용 최소를 의미한다

DP함수의 경우 무엇을 return해야하는가?
하위 2개의 배열로 쪼갤 수 있는 모든 경우의 최소를 return 한다
prefixSum에서 이미 기록되어있는경우(아마도 0이나 -1로 기록안됨을 표시),
해당 값을 return해준다

DP함수는 무엇을 parameter로 받는가?
시작과 끝을 받는다

prefixSum의 1개짜리 부분합들의 전처리는 필요한것인가? 2개는?